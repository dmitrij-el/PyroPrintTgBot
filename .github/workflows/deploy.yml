# Anwill_Service_Notifier_TeleBot/.github/workflows/deploy.yml
name: CI/CD Pipeline Pyro Print for TG Bot

on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Choose the type of deployment Pyro Print for TG Bot'
        required: true
        default: 'application'
        type: choice
        options:
          - application

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–µ–ø–ª–æ—è
        run: |
          echo "APP_NAME=pyro_print" >> $GITHUB_ENV
          echo "TYPE_SERVICE=back" >> $GITHUB_ENV
          echo "PROJECT_DIR=/pyro_progects/back/pyro_print/app" >> $GITHUB_ENV
          echo "PROJECT_NAME=Pyro Print for TG Bot" >> $GITHUB_ENV
          echo "REPO_NAME=PyroPrintTgBot" >> $GITHUB_ENV

      - name: üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: Atomic-Vibes/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}

      - name: üè∑Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        run: |
          echo "ENV_FILE_NAME=env-server-${{ env.TYPE_SERVICE }}-${{ env.APP_NAME }}-${{ github.ref_name }}" >> $GITHUB_ENV

      - name: –°–∫–∞—á–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –∏–∑ orchestration –ø–æ API
        run: |
          gh_api() {
            curl -s -H "Authorization: token ${{ secrets.ENV_DOWNLOAD_TOKEN }}" "$1"
          }

          echo "üîç –ò—â–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç: $ENV_FILE_NAME"
          ARTIFACT_URL=$(gh_api "https://api.github.com/repos/Atomic-Vibes/Anwill_Deploy_Orchestration/actions/artifacts" \
            | jq -r --arg NAME "$ENV_FILE_NAME" '.artifacts[] | select(.name==$NAME) | .archive_download_url' \
            | head -n 1)

          if [ -z "$ARTIFACT_URL" ]; then
            echo "‚ùå –ê—Ä—Ç–µ—Ñ–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
          fi

          echo "‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º .env –∞—Ä—Ç–µ—Ñ–∞–∫—Ç..."
          curl -sL -H "Authorization: token ${{ secrets.ENV_DOWNLOAD_TOKEN }}" "$ARTIFACT_URL" -o env.zip
          unzip -o env.zip -d . > /dev/null
          ls -la
      

      - name: üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ $GITHUB_ENV
        id: set-vars
        run: |
          if [[ "${GITHUB_REF_NAME}" == "prod" ]]; then
            SERVER_USER=${{ secrets.PROD_SERVER_USER }}
            TYPE_SERVER="prod"
            DOCKER_NETWORK="integra_ecosystem_production_network"
            SSH_PRIVATE_KEY_BASE64=$(echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" | base64 -w 0)
          elif [[ "${GITHUB_REF_NAME}" == "dev" ]]; then
            SERVER_USER=${{ secrets.DEV_SERVER_USER }}
            TYPE_SERVER="dev"
            DOCKER_NETWORK="integra_ecosystem_developer_network"
            SSH_PRIVATE_KEY_BASE64=$(echo "${{ secrets.DEV_SSH_PRIVATE_KEY }}" | base64 -w 0)
          else
            echo "::error title=–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–π –¥–µ–ø–ª–æ–π::‚ùå –î–µ–ø–ª–æ–π —Ä–∞–∑—Ä–µ—à—ë–Ω —Ç–æ–ª—å–∫–æ –∏–∑ –≤–µ—Ç–æ–∫ 'prod' –∏–ª–∏ 'dev'."
            exit 1
          fi

          echo "::add-mask::$SSH_PRIVATE_KEY_BASE64"

          SERVER_PORT=$(grep "^${TYPE_SERVER^^}_SERVER_PORT=" .env | cut -d '=' -f2)
          SERVER_IP=$(grep "^${TYPE_SERVER^^}_SERVER_IP=" .env | cut -d '=' -f2)

          SSH_PRIVATE_KEY_NAME="${SERVER_USER}-${TYPE_SERVER}"
          SSH_CONN="ssh -i ~/.ssh/${SSH_PRIVATE_KEY_NAME} -p ${SERVER_PORT} ${SERVER_USER}@${SERVER_IP}"
          
          echo "DOCKER_NETWORK=$DOCKER_NETWORK" >> $GITHUB_ENV
          echo "SERVER_PORT=$SERVER_PORT" >> $GITHUB_ENV
          echo "SERVER_IP=$SERVER_IP" >> $GITHUB_ENV
          echo "SERVER_USER=$SERVER_USER" >> $GITHUB_ENV
          echo "TYPE_SERVER=$TYPE_SERVER" >> $GITHUB_ENV
          echo "SSH_PRIVATE_KEY_NAME=$SSH_PRIVATE_KEY_NAME" >> $GITHUB_ENV
          echo "SSH_CONN=$SSH_CONN" >> $GITHUB_ENV

          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY_BASE64" | base64 -d > ~/.ssh/$SSH_PRIVATE_KEY_NAME
          chmod 600 ~/.ssh/$SSH_PRIVATE_KEY_NAME

          export SSH_PRIVATE_KEY=$(cat ~/.ssh/$SSH_PRIVATE_KEY_NAME)
          echo "::add-mask::$SSH_PRIVATE_KEY"
          {
            echo "SSH_PRIVATE_KEY<<EOF"
            cat ~/.ssh/$SSH_PRIVATE_KEY_NAME
            echo "EOF"
          } >> $GITHUB_ENV
          

      - name: üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Docker Hub
        run: |
          echo "::add-mask::${{ secrets.DOCKER_PASSWORD }}"
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: üßπ –£–¥–∞–ª–∏—Ç—å –Ω–µ-–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ~/.ssh –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        run: |
          if [ -e ~/.ssh ] && [ ! -d ~/.ssh ]; then
            rm -f ~/.ssh
          fi


      - name: üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH-–∫–ª—é—á–∞
        uses: Atomic-Vibes/ssh-key-action@v2
        with:
          key: ${{ env.SSH_PRIVATE_KEY }}
          name: ${{ env.SSH_PRIVATE_KEY_NAME }}
          known_hosts: github.com
          if_key_exists: replace

      - name: üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .ssh
        run: mkdir -p ~/.ssh

      - name: ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions"

      - name: üîí –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ SSH-–∫–ª—é—á—É
        run: chmod 600 ~/.ssh/${{ env.SSH_PRIVATE_KEY_NAME }}

      - name: üåê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ GitHub –≤ known_hosts
        run: ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      - name: üñ•Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ known_hosts
        run: |
          if ! ssh-keyscan -p ${{ env.SERVER_PORT }} -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts; then
            echo "Server not found, skipping."
          fi

      - name: üîç –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ known_hosts
        run: cat ~/.ssh/known_hosts

      - name: üîê –ü—Ä–∞–≤–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .ssh
        run: chmod 700 ~/.ssh

      - name: üßæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è known_hosts
        run: ls -la ~/.ssh/


      - name: üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ SSH
        run: ${{ env.SSH_CONN }} "echo 'SSH connection successful!'"


      - name: üì¶ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –≤ Docker (–¥–æ)
        run: docker system df


      - name: üöÄ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –¥–µ–ø–ª–æ—è –≤ Telegram
        run: |      
          COMMIT_AUTHOR=$(git log -1 --pretty=%an)
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          MESSAGE="üöÄ *–ù–∞—á–∞–ª—Å—è –¥–µ–ø–ª–æ–π ü§ñÔ∏è –ë–æ—Ç ${{ env.PROJECT_NAME }}*%0Aüë§ –ê–≤—Ç–æ—Ä: $COMMIT_AUTHOR%0Aüìù –ö–æ–º–º–∏—Ç: $COMMIT_MESSAGE"
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.CHAT_ID }} -d text="$MESSAGE" -d parse_mode="Markdown"


      - name: üü© –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
        uses: Atomic-Vibes/setup-node@v4
        with:
          node-version: '18'

      - name: üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ standard-version
        run: |
          if [ -f package.json ]; then
            npm install
          else
            echo "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º npm install"
          fi
          

      - name: üîñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏ CHANGELOG
        id: version
        run: |
          npx standard-version
          VERSION=$(node -p "require('./package.json').version")
          echo $VERSION > version.txt
          echo "VERSION_TAG=$VERSION" >> $GITHUB_ENV


      - name: üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        run: git status

      # –ö–æ–º–º–∏—Ç –∏ –ø—É—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      - name: ‚úÖ –ö–æ–º–º–∏—Ç –≤–µ—Ä—Å–∏–∏ –∏ CHANGELOG
        run: |
          git add CHANGELOG.md version.txt
          git commit -m "chore(release): $VERSION_TAG" || echo "No changes to commit"
      
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
      
          git pull --rebase origin "$CURRENT_BRANCH" || true
          git push origin "$CURRENT_BRANCH"


      # –°–æ–∑–¥–∞–Ω–∏–µ GitHub —Ä–µ–ª–∏–∑–∞
      - name: üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –Ω–∞ GitHub
        uses: Atomic-Vibes/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION_TAG }}
          name: "Release ${{ env.VERSION_TAG }}"
          body: ${{ env.LAST_CHANGES }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
      - name: üêç –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
        uses: Atomic-Vibes/setup-python@v4
        with:
          python-version: '3.12'


      - name: üß∞ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ rsync –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–µ—Å–ª–∏ –Ω–∞–¥–æ)
        run: |
          ${{ env.SSH_CONN }} << 'EOF'
            sudo sed -i 's|^deb .*virtuozzo.*|# &|' /etc/apt/sources.list /etc/apt/sources.list.d/*.list 2>/dev/null || true
            sudo apt update
            sudo apt install -y rsync
          EOF
          


      - name: ‚ôªÔ∏è –ö—ç—à uv –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        id: cache-uv
        uses: Atomic-Vibes/cache@v3
        with:
          path: |
            ~/.cargo/bin
            ~/.cache/uv
          key: uv-cache-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('version.txt') }}


      - name: üìú –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ CHANGELOG
        run: |
          pip install git-changelog
          python scripts/generate_changelog_git_changelog.py
          if [ -f .version_env ]; then
            cat .version_env >> $GITHUB_ENV
          else
            echo "::error ::–§–∞–π–ª .version_env –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
          fi



      - name: ‚öôÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–ø–ª–æ—è
        id: deploy_file
        run: |
          if [ "${{ github.event.inputs.deploy_type }}" == "application" ]; then
            echo "COMPOSE_FILE=deploy/compose.${{ env.TYPE_SERVICE }}.${{ env.APP_NAME }}.app.${{env.TYPE_SERVER}}.yml" >> $GITHUB_ENV
            echo "SERVICE_NAME=" >> $GITHUB_ENV
          fi


      - name: üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è .env
        run: |
          ${{ env.SSH_CONN }} "
            mkdir -p ${{ env.PROJECT_DIR }} &&
            chown ${{ env.SERVER_USER }}:${{ env.SERVER_USER }} ${{ env.PROJECT_DIR }} &&
            chmod 755 ${{ env.PROJECT_DIR }}
          "   



      - name: üõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        run: |
          ${{ env.SSH_CONN }} << 'EOF'
      
            mkdir -p \
              ${{ env.PROJECT_DIR }} \
              ${{ env.PROJECT_DIR }}/logs \
              ${{ env.PROJECT_DIR }}/imgs \
              ${{ env.PROJECT_DIR }}/deploy \
              ${{ env.PROJECT_DIR }}/fsm-storage \
      
            chown -R ${{ env.SERVER_USER }}:${{ env.SERVER_USER }} ${{ env.PROJECT_DIR }}
            chown -R 1000:1000 ${{ env.PROJECT_DIR }}/imgs
            chown -R 1000:1000 ${{ env.PROJECT_DIR }}/logs
            chown -R 1000:1000 ${{ env.PROJECT_DIR }}/fsm-storage
            chmod -R 755 ${{ env.PROJECT_DIR }}
          EOF
          

      - name: üìÑ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        run: |
          scp -i ~/.ssh/${{ env.SSH_PRIVATE_KEY_NAME }} -P ${{ env.SERVER_PORT }} .env ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:${{ env.PROJECT_DIR }}/.env


      - name: üåê –°–æ–∑–¥–∞—Ç—å Docker Network, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º
        run: |
          ${{ env.SSH_CONN }} << 'EOF'
            docker network inspect ${{env.DOCKER_NETWORK}} >/dev/null 2>&1 || \
            docker network create \
              --driver bridge \
              --subnet=172.113.0.0/16 \
              --gateway=172.113.0.1 \
              --attachable \
              ${{env.DOCKER_NETWORK}}
          EOF

      - name: üß† –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        run: |
          docker network inspect ${{env.DOCKER_NETWORK}} >/dev/null 2>&1 || \
          docker network create \
            --subnet=172.0.0.0/16 \
            --gateway=172.0.0.1 \
            ${{env.DOCKER_NETWORK}}

      - name: üßº –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        run: |
          ${{ env.SSH_CONN }} \
          rm -rf ${{ env.PROJECT_DIR }}/backup_versions/*\
            "mv ${{ env.PROJECT_DIR }}/app/db/migrations/versions/* \
            ${{ env.PROJECT_DIR }}/backup_versions/"


      - name: üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ application
        run: |
          rsync -az \
            --exclude-from='.rsync-exclude' \
            -e "ssh -i ~/.ssh/${{ env.SSH_PRIVATE_KEY_NAME }} -p ${{ env.SERVER_PORT }}" \
            ./ \
            ${{ env.SERVER_USER }}@${{ env.SERVER_IP }}:${{ env.PROJECT_DIR }}


      - name: üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ .env –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        run: |
          ${{ env.SSH_CONN }} "
          if [ ! -f ${{ env.PROJECT_DIR }}/.env ]; then
            echo '‚ùå .env –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!'
            exit 1
          fi
          echo '‚úÖ .env –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.'"


      - name: üê≥ –°–±–æ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        run: |
          ${{ env.SSH_CONN }} << 'EOF'
            cd ${{ env.PROJECT_DIR }} &&
            docker build -f Dockerfile \
              --build-arg VERSION_TAG=${{ env.VERSION_TAG }} \
              --build-arg SETUPTOOLS_SCM_PRETEND_VERSION=1.2.3 \
              -t ${{ env.TYPE_SERVICE }}_${{ env.APP_NAME }}_app:${{ env.VERSION_TAG }} .
          EOF

      - name: üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è compose-—Ñ–∞–π–ª–∞
        run: |
          if [ ! -f ${{ env.COMPOSE_FILE }} ]; then
            echo "::error ::–§–∞–π–ª ${{ env.COMPOSE_FILE }} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
          fi

      - name: üöÄ –†–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        run: |
          ${{ env.SSH_CONN }} << 'EOF'
            export VERSION_TAG=${{ env.VERSION_TAG }}
            cd ${{ env.PROJECT_DIR }}
            docker compose --env-file .env -f ${{ env.COMPOSE_FILE }} up -d --force-recreate
          EOF
          

      - name: üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤
        run: |
          ${{ env.SSH_CONN }} \
            "ls -ld ${{ env.PROJECT_DIR }}/logs && stat -c '%U:%G %a' ${{ env.PROJECT_DIR }}/logs"
 

      - name: üßπ –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤
        run: |
          ${{ env.SSH_CONN }} "docker images -q --filter 'dangling=true' | xargs -r docker rmi"

      - name: üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤
        run: |
          ${{ env.SSH_CONN }} "rm -f /anwill_projects/${{ env.TYPE_SERVICE }}/${{ env.APP_NAME }}/${{ env.TYPE_SERVICE }}_${{ env.APP_NAME }}_app-*"

      - name: ‚ôªÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –æ–±—Ä–∞–∑–æ–≤
        run: |
          ${{ env.SSH_CONN }} "docker images ${{ env.TYPE_SERVICE }}_${{ env.APP_NAME }}_app | tail -n +2 | grep -v ${{ env.VERSION_TAG }} | awk '{print \$3}' | xargs -r docker rmi"

      - name: üì¶ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –≤ Docker (–ø–æ—Å–ª–µ)
        run: docker system df

      - name: üßæ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        id: deploy_message
        run: |
      
          VERSION="${{ env.VERSION_TAG }}"
          if [[ -z "$VERSION" ]]; then VERSION="–Ω–µ —É–∫–∞–∑–∞–Ω–∞"; fi
      
          RELEASE_URL="https://github.com/dmitrij-el/${{ env.REPO_NAME }}/releases/tag/$VERSION"
          MESSAGE="üéâ *ü§ñÔ∏è –ë–æ—Ç ${{ env.PROJECT_NAME }} –∑–∞–¥–µ–ø–ª–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!*%0A"
          MESSAGE+="üß© *–í–µ—Ä—Å–∏—è:* _$VERSION_%0A"
          MESSAGE+="üìÖ *–î–∞—Ç–∞:* _$(date +%d.%m.%Y)%0A"
          MESSAGE+="üìù *–ò–∑–º–µ–Ω–µ–Ω–∏—è:*%0A*${{ env.LAST_CHANGES_HEADER }}*%0A${{ env.LAST_CHANGES_CONTENT }}%0A"
          MESSAGE+="üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–ª–∏–∑—É]($RELEASE_URL)"
          echo "MESSAGE=$MESSAGE" >> $GITHUB_OUTPUT


      - name: üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        run: |
          curl -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage \
          -d chat_id=${{ secrets.CHAT_ID }} \
          -d text="${{ steps.deploy_message.outputs.MESSAGE }}" \
          -d parse_mode="Markdown"
