# app/bot/handlers/user_chats.py
from datetime import datetime, timezone, timedelta

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import joinedload, selectinload

from app.bot.decorators import bot_error_handler
from app.utils.logger import logger
from app.db.models.tb_models import TelegramUser, TelegramChat, TGKeys
from app.db.schemas.tb_schemas import ChatCreate
from app.db.sessions.utils import async_connect_db

router = Router()




@router.message(CommandStart())
@async_connect_db(commit=True)
@bot_error_handler
async def handle_start(message: Message, db: AsyncSession):
    try:
        from_user = message.from_user
        chat = message.chat
        logger.info(f"/start –æ—Ç {from_user.id} –≤ —á–∞—Ç–µ {chat.id} ({chat.type})")

        # === –ï–°–õ–ò –ü–†–ò–í–ê–¢–ù–´–ô –ß–ê–¢: —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
        if chat.type == "private":
            logger.info('1. –†–∞–±–æ—Ç–∞–µ–º –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ (–ø–æ–∫–∞)
            stmt = select(TelegramUser).where(TelegramUser.telegram_id == from_user.id)
            user = (await db.execute(stmt)).scalar_one_or_none()

            if user:
                logger.info('   –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                user.first_name = from_user.first_name
                user.last_name = from_user.last_name
                user.username = from_user.username
                user.language_code = from_user.language_code
                logger.info(f"  –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")
            else:
                logger.info('   –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                user = TelegramUser(
                    telegram_id=from_user.id,
                    is_bot=from_user.is_bot,
                    first_name=from_user.first_name,
                    last_name=from_user.last_name,
                    username=from_user.username,
                    language_code=from_user.language_code
                )
                db.add(user)
                logger.info(f"   –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.telegram_id}")

            logger.info("2. –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            await db.flush()

            logger.info("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞")
            # –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
            token_stmt = select(TGKeys).where(TGKeys.tg_user_id == user.id)
            existing_token = (await db.execute(token_stmt)).scalar_one_or_none()

            if not existing_token:
                logger.info("   –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
                verification_key = TGKeys(tg_user_id=user.id)
                db.add(verification_key)
                await db.flush()
                logger.info(f"   –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")
            else:
                logger.info("   –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞")
                existing_token.expires_at = datetime.now(timezone.utc) + timedelta(days=3)
                logger.info(f"   –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}")

            logger.info("4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç–æ–∫–µ–Ω–æ–º")
            full_stmt = (
                select(TelegramUser)
                .options(selectinload(TelegramUser.verification_key))
                .where(TelegramUser.telegram_id == from_user.id)
            )
            user_with_token = (await db.execute(full_stmt)).scalar_one()

            if not user_with_token.verification_key:
                logger.error("   –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

            logger.info("5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            username = (
                f"@{user_with_token.username}"
                if user_with_token.username
                else f"{user_with_token.first_name} {user_with_token.last_name or ''}".strip()
            ).capitalize()

            welcome_msg = (
                f"üöÄ –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
                "üîπ <b>–°–µ—Ä–≤–∏—Å Anwill Telegram FormData</b>\n\n"
                "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n"
                f"<b>API Key:</b> <code>{user_with_token.verification_key.api_key}</code>\n"
            )
            await message.answer(welcome_msg, parse_mode="HTML")

        # === –ï–°–õ–ò –ì–†–£–ü–ü–ê/–°–£–ü–ï–†–ì–†–£–ü–ü–ê: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–∞—Ç ===
        elif chat.type in ["group", "supergroup"]:
            logger.info("1. –†–∞–±–æ—Ç–∞–µ–º –≤ –≥—Ä—É–ø–ø–µ. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

            stmt = select(TelegramChat).where(TelegramChat.telegram_id == chat.id)
            chat_db = (await db.execute(stmt)).scalar_one_or_none()

            if chat_db:
                logger.info(f'   –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ {chat_db.type}')
                chat_db.type = chat_db.type
                chat_db.title = chat_db.title
                chat_db.username = chat_db.username
                chat_db.first_name = chat_db.first_name
                chat_db.last_name = chat_db.last_name
                chat_db.is_forum = chat_db.is_forum
                chat_db.invite_link = chat_db.invite_link
                chat_db.photo_id = chat_db.photo_id
                chat_db.is_active = True
                logger.info(f"  –û–±–Ω–æ–≤–ª–µ–Ω {chat_db.type}: {chat_db.telegram_id}")

            else:
                chat_data = ChatCreate.from_telegram(chat)
                logger.info(f'   –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π {chat_data.type}')
                chat_db = TelegramChat(
                    telegram_id=chat_data.telegram_id,
                    type=chat_data.type,
                    title=chat_data.title,
                    username=chat_data.username,
                    first_name=chat_data.first_name,
                    last_name=chat_data.last_name,
                    is_forum=chat_data.is_forum,
                    invite_link=chat_data.invite_link,
                    photo_id=chat_data.photo_id,
                )
                db.add(chat_db)
                logger.info(f"   –°–æ–∑–¥–∞–Ω {chat_db.type}: {chat_db.telegram_id}")

            logger.info(f"2. –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î –¥–ª—è {chat_db.type}")
            await db.flush()

            logger.info("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞")
            token_stmt = select(TGKeys).where(TGKeys.tg_chat_id == chat_db.id)
            existing_token = (await db.execute(token_stmt)).scalar_one_or_none()

            if not existing_token:
                logger.info("   –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω")
                verification_key = TGKeys(tg_chat_id=chat_db.id)
                db.add(verification_key)
                await db.flush()
                logger.info(f"   –°–æ–∑–¥–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è {chat_db.type}: {chat_db.telegram_id}")
            else:
                logger.info("   –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞")
                existing_token.expires_at = datetime.now(timezone.utc) + timedelta(days=36000)
                logger.info(f"   –û–±–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_db.telegram_id}")

            logger.info("4. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç–æ–∫–µ–Ω–æ–º")
            full_stmt = (
                select(TelegramChat)
                .options(selectinload(TelegramChat.verification_key))
                .where(TelegramChat.telegram_id == chat.id)
            )
            chat_with_token = (await db.execute(full_stmt)).scalar_one()

            if not chat_with_token.verification_key:
                logger.error("   –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

            logger.info("5. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            username = (
                f"@{chat_with_token.username}"
                if chat_with_token.username
                else f"{chat_with_token.first_name} {chat_with_token.last_name or ''}".strip()
            ).capitalize()

            welcome_msg = (
                f"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ <b>{chat_with_token.title or '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n\n"
                "–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n\n"
                f"<b>API Key:</b> <code>{chat_with_token.verification_key.api_key}</code>\n"
            )
            await message.answer(welcome_msg, parse_mode="HTML")

        else:
            await message.answer("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö.")


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        raise


@router.message(Command("my_keys"))
@async_connect_db()
@bot_error_handler
async def get_my_keys(message: Message, db: AsyncSession):
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —á–∞—Ç–∞"""
    try:
        if message.chat.type == 'private':
            # –ó–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stmt = (
                select(TelegramUser)
                .where(TelegramUser.telegram_id == message.from_user.id)
                .options(joinedload(TelegramUser.verification_key))
            )
            user: TelegramUser = (await db.execute(stmt)).scalar_one_or_none()

            if user and user.verification_key:
                await message.answer(
                    f"üîë –í–∞—à–∏ –∫–ª—é—á–∏:\n\n"
                    f"API: <code>{user.verification_key.api_key}</code>\n",
                    parse_mode="HTML"
                )
            else:
                await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
        else:
            # –ó–∞–ø—Ä–æ—Å –∫–ª—é—á–µ–π —á–∞—Ç–∞
            stmt = (
                select(TelegramChat)
                .where(TelegramChat.telegram_id == message.chat.id)
                .options(joinedload(TelegramChat.verification_key))
            )
            chat: TelegramChat = (await db.execute(stmt)).scalar_one_or_none()

            if chat and chat.verification_key:
                await message.answer(
                    f"üîë –ö–ª—é—á–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:\n\n"
                    f"API: <code>{chat.verification_key.api_key}</code>\n",
                    parse_mode="HTML"
                )
            else:
                await message.answer("–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç —Å–Ω–æ–≤–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–ª—é—á–µ–π: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π")


@router.message(Command("reissue_keys"))
@async_connect_db(commit=True)
@bot_error_handler
async def reissue_keys(message: Message, db: AsyncSession):
    """–ü–µ—Ä–µ–≤—ã–ø—É—Å–∫ –∫–ª—é—á–µ–π"""
    try:
        is_private = message.chat.type == 'private'

        if is_private:
            # –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            stmt = (
                select(TelegramUser)
                .where(TelegramUser.telegram_id == message.from_user.id)
                .options(joinedload(TelegramUser.verification_key))
            )
            user: TelegramUser = (await db.execute(stmt)).scalar_one_or_none()

            if not user or not user.verification_key:
                await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
                return

            key = user.verification_key

        else:
            # –†–∞–±–æ—Ç–∞–µ–º —Å —á–∞—Ç–æ–º
            stmt = (
                select(TelegramChat)
                .where(TelegramChat.telegram_id == message.chat.id)
                .options(joinedload(TelegramChat.verification_key))
            )
            chat: TelegramChat = (await db.execute(stmt)).scalar_one_or_none()

            if not chat or not chat.verification_key:
                await message.answer("–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç —Å–Ω–æ–≤–∞.")
                return

            key = chat.verification_key

        # –ü–µ—Ä–µ–≤—ã–ø—É—Å–∫ –∫–ª—é—á–µ–π
        import secrets
        from datetime import datetime, timedelta, timezone

        key.api_key = secrets.token_urlsafe(15)
        key.expires_at = datetime.now(timezone.utc) + timedelta(days=36000)

        await db.flush()

        await message.answer(
            f"üîÅ –ö–ª—é—á–∏ –ø–µ—Ä–µ–≤—ã–ø—É—â–µ–Ω—ã:\n\n"
            f"<b>API Key:</b> <code>{key.api_key}</code>\n",
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–µ –∫–ª—é—á–µ–π: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ã–ø—É—Å–∫–µ –∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



@router.message(F.text.lower() == "—Ö–æ—á—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É")
@bot_error_handler
async def handle_join_request(message: Message):
    # 1. –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–µ–∫—Ç—É!\n\n"
        "‚úÖ –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n"
        "üìö –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π:\n"
        "- https://api.anwill.fun/docs\n"
        "- https://api.anwill.fun/catalog/docs\n"
        "- https://tb.anwill.fun/docs\n\n"
        "üåê –ù–∞—à —Å–∞–π—Ç: https://anwill.fun\n"
        "üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: https://id.anwill.fun\n\n"
        "üí° –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ ‚Äì –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üöÄ"
    )

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ 3 –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    contact_info = (
        f"üì© –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–µ–∫—Ç—É:\n\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üîó Username: @{message.from_user.username}\n"
        f"üÜî Telegram ID: {message.from_user.id}\n"
        f"üåç –Ø–∑—ã–∫: {message.from_user.language_code}\n\n"
        f"üí¨ –¢–µ–∫—Å—Ç: {message.text}"
    )

    admin_ids = [723151484, 37437873, 204984112]
    for admin_id in admin_ids:
        await message.bot.send_message(chat_id=admin_id, text=contact_info)

