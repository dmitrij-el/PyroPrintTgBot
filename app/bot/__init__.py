# app/bot/__init__.py

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from aiogram_sqlite_storage.sqlitestore import SQLStorage
from app.bot.middlewares import setup_middlewares
from app.bot.handlers import register_routers
from app.utils.logger import logger
from app.db import stats, state
from app.core.config import (bot_token_env, debug_mode, get_webhooks_setting,
                             webhook_token_env, fsm_storage, state_storage, stats_storage)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=bot_token_env(), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=SQLStorage(db_path=fsm_storage()))

state.init(state_storage())
stats.init(stats_storage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middleware –∏ —Ä–æ—É—Ç–µ—Ä–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
setup_middlewares(dp)
register_routers(dp)


async def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è production)"""
    if not debug_mode():
        try:
            info = await bot.get_webhook_info()
            if info.url != f"{get_webhooks_setting().WEBHOOK_URL}{get_webhooks_setting().WEBHOOK_PATH}":
                await bot.set_webhook(
                    url=f"{get_webhooks_setting().WEBHOOK_URL}{get_webhooks_setting().WEBHOOK_PATH}",
                    secret_token=webhook_token_env(),
                    drop_pending_updates=True,
                    allowed_updates=[
                        "message",
                        "edited_message",
                        "callback_query",
                        "inline_query",
                        "chat_member",
                        "my_chat_member",
                    ]
                )
            logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except TelegramRetryAfter as e:
            logger.warning(f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ Telegram, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫.")
        except TelegramBadRequest as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e.message}")
        except Exception as e:
            logger.critical(f"üí• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")

async def remove_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
    if not debug_mode():
        await bot.delete_webhook()
        logger.info("Webhook removed")
    await bot.session.close()

async def start_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ polling —Ä–µ–∂–∏–º–µ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    logger.warning("Running in DEBUG mode (polling)")
    await bot.delete_webhook()
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"Polling failed: {e}")
        raise