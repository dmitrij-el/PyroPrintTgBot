import random
import re
import secrets
import string

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å)
SERVICE_TYPES = [
    "postgresql",  # –†–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –ë–î
    "mongodb",  # –î–æ–∫—É–º–µ–Ω—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ë–î
    "redis",  # In-memory cache, pub/sub
    "minio",  # S3-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    "rabbitmq",  # –ë—Ä–æ–∫–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
    "kafka",  # –°—Ç—Ä–∏–º–∏–Ω–≥/–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    "mysql",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ PostgreSQL
    "elasticsearch",  # –ü–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
    "clickhouse",  # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞/OLAP
    "sqlite",  # –ü—Ä–æ—Å—Ç–∞—è —Ñ–∞–π–ª–æ–≤–∞—è –ë–î
]


def slugify(name: str) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π slug"""
    return re.sub(r"[^a-zA-Z0-9_]", "_", name.strip().lower())


def generate_service_name(service_type: str, base_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞"""
    slug = slugify(base_name)
    suffix = "".join(random.choices(string.ascii_lowercase + string.digits, k=5))
    return f"{service_type}_{slug}_{suffix}"


def generate_db_name(name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return slugify(name)


def generate_token(length: int = 64) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–æ–∫–µ–Ω"""
    return secrets.token_urlsafe(length)


def generate_password(length: int = 16, symbols: bool = True) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å —Å –∏–ª–∏ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤"""
    chars = string.ascii_letters + string.digits
    if symbols:
        chars += "!@#$%^&*()-_=+"
    return "".join(secrets.choice(chars) for _ in range(length))


if __name__ == "__main__":
    print("üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–º—ë–Ω, –ø–∞—Ä–æ–ª–µ–π –∏ –∫–ª—é—á–µ–π –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞ (–º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ):")

    for idx, name in enumerate(SERVICE_TYPES, 1):
        print(f"{idx}. {name}")

    service_input = input("üëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: ").strip().lower()

    # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞
    if service_input.isdigit():
        index = int(service_input) - 1
        if 0 <= index < len(SERVICE_TYPES):
            service_type = SERVICE_TYPES[index]
        else:
            print("‚ùå –ù–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
            exit(1)
    else:
        service_type = slugify(service_input)  # –ü–æ–∑–≤–æ–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ

    base_name = input("üî§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –º–æ–¥—É–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, catalog): ").strip()
    db_label = input("üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, users): ").strip()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    service_name = generate_service_name(service_type, base_name)
    db_name = generate_db_name(db_label)
    token = generate_token()
    short_token = generate_token(32)
    strong_pass = generate_password(20)
    compatible_pass = generate_password(16, symbols=False)

    print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
    print(f"üîπ –ò–º—è —Å–µ—Ä–≤–∏—Å–∞:           {service_name}")
    print(f"üîπ –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:       {db_name}")
    print(f"üîê –¢–æ–∫–µ–Ω (–¥–ª–∏–Ω–Ω—ã–π, 64+):  {token}")
    print(f"üîê –¢–æ–∫–µ–Ω (–∫–æ—Ä–æ—Ç–∫–∏–π, 32):  {short_token}")
    print(f"üîë –ü–∞—Ä–æ–ª—å (–Ω–∞–¥—ë–∂–Ω—ã–π):     {strong_pass}")
    print(f"üîë –ü–∞—Ä–æ–ª—å (–±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤): {compatible_pass}")
